name: 'Download libraries'
description: 'Download files necessary for compilation and testing'
inputs:
  download-pybind:
    type: boolean
    description: 'Download pybind11'
    default: false

  download-googletest:
    type: boolean
    description: 'Download googletest'
    default: true

  install-boost-gcc:
    type: boolean
    description: 'Install boost built with GCC'
    default: true

  install-boost-clang:
    type: boolean
    description: 'Install boost built with clang'
    default: false

  install-boost-brew-clang:
    type: boolean
    description: 'Install boost built with Homebrew Clang'
    default: false

  install-gcc:
    type: boolean
    description: 'Install GCC toolset (compiler and build tools)'
    default: true

  install-clang:
    type: boolean
    description: 'Install clang toolset (compiler and build tools)'
    default: false

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - name: Install build tools
      run: |
        sudo apt-get update -y
        sudo apt-get install gcc-10 g++-10 cmake build-essential -y
      shell: bash
      if: inputs.install-gcc != 'false'

    - name: Install clang
      # llvm.sh installs all needed libraries, no need in build-essential
      # "all" option is needed to install libc++ and libc++abi
      run: |
        sudo apt-get update -y
        sudo apt-get install cmake make -y
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 17 all
      shell: bash
      if: inputs.install-clang != 'false'

    - name: Make lib directory
      run: |
        mkdir -p lib
      shell: bash

    - name: Download googletest
      uses: ./.github/composite-actions/download-library
      with:
        directory: googletest
        download-command: git clone https://github.com/google/googletest/ --branch v1.14.0 --depth 1
      if: inputs.download-googletest != 'false'

    - name: Download easyloggingpp
      uses: ./.github/composite-actions/download-library
      with:
        directory: easyloggingpp
        download-command: git clone https://github.com/amrayn/easyloggingpp/ --branch v9.97.0 --depth 1

    - name: Download better-enums
      uses: ./.github/composite-actions/download-library
      with:
        directory: better-enums
        download-command: git clone https://github.com/aantron/better-enums.git --branch 0.11.3 --depth 1

    - name: Download pybind11
      uses: ./.github/composite-actions/download-library
      with:
        directory: pybind11
        download-command: git clone https://github.com/pybind/pybind11.git --branch v2.13.4 --depth 1
      if: inputs.download-pybind != 'false'
    - name: Download emhash
      uses: ./.github/composite-actions/download-library
      with:
        directory: emhash
        download-command: git clone https://github.com/ktprime/emhash.git --depth 1
    - name: Download atomicbitvector
      uses: ./.github/composite-actions/download-library
      with:
        directory: atomicbitvector
        download-command: git clone https://github.com/ekg/atomicbitvector.git --depth 1
    - name: Download boost
      uses: ./.github/composite-actions/download-library
      with:
        directory: boost
        download-command: wget -O boost_1_81_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.81.0/boost_1_81_0.tar.gz/download && tar xzvf boost_1_81_0.tar.gz && mv boost_1_81_0 boost

    - name: Install Boost built with GCC
      run: |
        cd lib/boost
        ./bootstrap.sh --prefix=/usr
        sudo ./b2 install --prefix=/usr
      shell: bash
      if: inputs.install-boost-gcc != 'false'
    - name: Install Boost built with clang
      run: |
        cd lib/boost
        ./bootstrap.sh --prefix=/usr --with-toolset=clang
        ./b2 clean
        ./b2 toolset=clang cxxflags="-stdlib=libc++" linkflags="-stdlib=libc++"
        sudo ./b2 install --prefix=/usr
      shell: bash
      if: inputs.install-boost-clang != 'false'
    - name: Install Boost built with Homebrew Clang
      # b2 doesn't recognize custom compilers, so some trick is needed:
      # Also, /usr is read-only, so install into /usr/local
      run: |
        cd lib/boost
        export PATH=$(brew --prefix llvm@17)/bin:$PATH
        ./bootstrap.sh --prefix=/usr/local --with-toolset=clang
        ./b2 clean
        ./b2 toolset=clang cxxflags="-std=c++11 -stdlib=libc++" linkflags="-stdlib=libc++"
        sudo ./b2 install --prefix=/usr/local
      shell: bash
      if: inputs.install-boost-brew-clang != 'false'
    - name: Download frozen
      uses: ./.github/composite-actions/download-library
      with:
        directory: frozen
        download-command: git clone https://github.com/serge-sans-paille/frozen.git --depth 1

#    Uncomment this if we set up our own git lfs server
#    - name: Install git-lfs
#      run: |
#         curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
#         git lfs install
#      shell: bash
#    - name: Generate lfs file list
#      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
#      shell: bash
#    - name: Restore lfs cache
#      uses: actions/cache@v3
#      id: lfs-cache
#      with:
#        path: .git/lfs
#        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
